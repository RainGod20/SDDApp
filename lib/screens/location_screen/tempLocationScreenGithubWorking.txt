import 'package:flutter/material.dart';
import 'package:timezone/timezone.dart' as tz;
import 'package:timezone/data/latest.dart' as tz;
import 'package:timezone/src/location.dart';

class LocationScreen extends StatefulWidget {
  const LocationScreen({super.key});

  @override
  State<LocationScreen> createState() => _LocationScreenState();
}

class _LocationScreenState extends State<LocationScreen> {
  var locationNames = tz.timeZoneDatabase.locations;
  late String outputLocation;
  Map<String, List<String>> duplicateChecker = {};

  List<String> allowedContinents = [
    "Africa",
    "America",
    "Antarctica",
    "Arctic",
    "Asia",
    "Atlantic",
    "Australia",
    "Brazil",
    "Canada",
    "Chile",
    "Cuba",
    "EST",
    "Egypt",
    "Eire",
    "Etc",
    "Europe",
    "Greenwich",
    "Hongkong",
    "Iceland",
    "Indian",
    "Iran",
    "Israel",
    "Jamaica",
    "Japan",
    "Kwajalein",
    "Libya",
    "Mexico",
    "Pacific",
    "Poland",
    "Portugal",
    "Singapore",
    "Turkey",
    "US",
    "UTC",
    "Zulu"
  ];

  Set<String> validLocation = Set();

  void ContAndCountry(Map<String, Location> locationsMap, int index) {
    String locationAtKey = locationNames.keys.elementAt(index);

    var firstPartLocation = locationAtKey.split("/").first;
    var lastPartLocation = locationAtKey.split("/").last;

    // Check if the location is allowed and for duplicates
    if (allowedContinents.contains(firstPartLocation)) {
      // Only has the ones which are allowed
      if (locationAtKey.contains("Etc")) {
        // Now check for duplicates
        if (duplicateChecker.containsKey("Etc")) {
          if (duplicateChecker["Etc"]!.contains(locationAtKey)) {
            // Is a duplicate
            outputLocation = "not allowed";
            print("Found Duplicate in ETC");
          } else {
            // Has the key, so etc has been done before but current one is not a duplicate
            duplicateChecker["Etc"]!.add(locationAtKey);
            outputLocation = "Etc - $lastPartLocation";
          }
        } else {
          duplicateChecker["Etc"] = [locationAtKey];
          outputLocation = "Etc - $lastPartLocation";
        }
      } else if (locationAtKey.contains("/")) {
        String continent = "";
        String country = "";
        String city = "";
        String timezoneAbbrev = tz.TZDateTime.now(tz.getLocation(locationAtKey)).timeZoneName;
        continent = firstPartLocation;
        if (duplicateChecker.containsKey(continent)) {
          // Has the continent
          if (duplicateChecker[continent]!.contains(lastPartLocation)) {
            // Is a duplicate
            outputLocation = "not allowed";
            print("Found duplicate in / form");
          } else {
            // Is not a duplicate
            duplicateChecker[continent]!.add(lastPartLocation);
            if ("/".allMatches(locationAtKey).length > 1) {
              // Has a continent, country and a city (in the form continent/country/city)
              country = locationAtKey.split("/")[1];
              city = lastPartLocation;
            } else {
              // Has just a continent and a country (in the form continent/country)
              country = lastPartLocation;
            }
            outputLocation = city == ""
                ? "$country, $continent | $timezoneAbbrev"
                : "$city, $country, $continent | $timezoneAbbrev";
            validLocation.add(outputLocation);
          }
        } else {
          // No duplicates
          duplicateChecker[continent] = [lastPartLocation];
          if ("/".allMatches(locationAtKey).length > 1) {
            // Has a continent, country and a city (in the form continent/country/city)
            country = locationAtKey.split("/")[1];
            city = lastPartLocation;
          } else {
            // Has just a continent and a country (in the form continent/country)
            country = lastPartLocation;
          }
          outputLocation = city == ""
              ? "$country, $continent | $timezoneAbbrev"
              : "$city, $country, $continent | $timezoneAbbrev";
          validLocation.add(outputLocation);
        }
      } else {
        // LocationAtKey only has a single word (no '/'s or 'Est's)
        if (duplicateChecker.containsKey(locationAtKey)) {
          // Is a duplicate
          outputLocation = "not allowed";
          print("Found duplicate in single word form");
        } else {
          // Is not a duplicate
          outputLocation = locationAtKey;
          validLocation.add(locationAtKey);
        }
      }
    } else {
      print("Found a not allowed");
      outputLocation = "not allowed";
    }
  }

  @override
  void initState() {
    tz.initializeTimeZones();
    super.initState();

    for (int i = 0; i <= 430; i++) {
      ContAndCountry(locationNames, i);
    }
  }

  @override
  Widget build(BuildContext context) {
    //
    return Scaffold(
      appBar: AppBar(
        title: Text(
          "Location Choose Page",
          style: Theme.of(context).textTheme.bodyLarge,
        ),
        centerTitle: true,
      ),
      body: ListView.builder(
        shrinkWrap: false,
        itemCount: validLocation.length,
        itemBuilder: (context, index) {
          return Card(
            child: ListTile(
              onTap: () {},
              title: Text(validLocation.elementAt(index)),
            ),
          );
        },
      ),
    );
  }
}
